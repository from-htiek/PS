import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

/*
 * 2022.03.14
 * 상어 초등학교
 */
public class S1_21608 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		
		int[][] seat = new int[n][n]; // 자리 배치 
		int[][] favorite = new int[n*n][5];
		
		for(int i = 0; i < n*n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j = 0; j < 5; j++) {
				favorite[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		// 입력 확인 
//		for(int[] f : favorite) {
//			System.out.println(Arrays.toString(f));
//		}
		
		int[] dy = {1, -1, 0, 0};
		int[] dx = {0, 0, 1, -1};
		
		for(int s = 0; s < n*n; s++) { // 총 n*n명 배치
			int like, empty;
			int likeMax = 0;
			boolean likeFlag = false;
			List<int[]> likeList = new ArrayList<>();
			
			int emptyMax = 0; 
			boolean emptyFlag = false;
			List<int[]> emptyList = new ArrayList<>();
			
			for(int i = 0; i < n; i++) { // n*n 자리 탐색 
				for(int j = 0; j < n; j++) {
					like = 0;
					empty = 0; 
					
					if(seat[i][j] != 0) continue; // 이미 배정 된 자리는 탐색 제외 
					for(int d = 0; d < 4; d++) { // 인접칸 탐색 
						int newy = i + dy[d];
						int newx = j + dx[d];
						
						if(newy < 0 || newy >= n || newx < 0 || newx >= n) continue; // 범위 벗어나면 제외
						
						for(int k = 1; k < 5; k++) {
							if(seat[newy][newx] == favorite[s][k]) { // 인접한 곳에 좋아하는 친구가 앉았을 때
								like++; 
							}
							
							if(seat[newy][newx] == 0) { // 인접한 칸이 비었을 때
								empty++; 
							}
						}
					}
					
					if(likeMax < like) {
						likeMax = like;
						likeFlag = false;
						likeList.clear();
						likeList.add(new int[] {i, j});
					}else if(likeMax == like) {
						likeFlag = true; 
//						likeList.add(new int[] {i, j});
					}
					
					if(emptyMax < empty) {
						emptyMax = empty;
						emptyFlag = false;
						emptyList.clear();
						emptyList.add(new int[] {i,j});
					}else if(emptyMax == empty) {
						emptyFlag = true; 
//						emptyList.add(new int[] {i,j});
					}
					
				}
			}
			
			if(!likeFlag) { // 1. 좋아하는 학생이 인접한 칸에 많이 앉은 칸 배정
				int[] cur = likeList.get(0);
				seat[cur[0]][cur[1]] = favorite[s][0]; 
			}else if(!emptyFlag) { // 2. 1번 만족하는 칸이 여러 개 일 때, 비어있는 칸이 가장 만은 칸 배정
				int[] cur = emptyList.get(0);
				seat[cur[0]][cur[1]] = favorite[s][0]; 
				
			}else { // 2번 만족하는 칸이 여러 개 일 때, 행번호/열번호 작은 칸
				System.out.println(???);
//				int[] cur = emptyList.get(0);
//				seat[cur[0]][cur[1]] = favorite[s][0]; 
				outerloop : for(int[] likelist : likeList) {
					for(int[] emptylist : emptyList) {
						if(likelist[0] == emptylist[0] && likelist[1] == emptylist[1]) {
							System.out.println(likelist[0] + " " + likelist[1]);
							seat[likelist[0]][likelist[1]] = favorite[s][0]; 
							break outerloop; 
						}
					}
				}
			}
			
			for(int[] q : seat) {
				System.out.println(Arrays.toString(q));
			}
			System.out.println();
			
			
		}
		
		
		
	}
}
